# Copyright (C) 2001-2003 Douglas Gregor
# Copyright (C) 2011-2012 Antony Polukhin
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

import testing ;
import feature ;

project
    : requirements
        <library>/boost/test//boost_unit_test_framework
        <link>static
        <toolset>gcc-4.8:<define>BOOST_STL_SUPPORTS_NEW_UNICODE_LOCALES
    ;

# Thanks to Steven Watanabe for helping with <nowchar> feature
feature.feature nowchar : on :
 composite optional propagated link-incompatible ;
feature.compose <nowchar>on : <cxxflags>/Zc:wchar_t- ;

test-suite conversion
  : [ run implicit_cast.cpp ]
    [ compile-fail implicit_cast_fail.cpp ]
    [ run ../cast_test.cpp ]
    [ run ../numeric_cast_test.cpp ]
    [ run ../lexical_cast_test.cpp ]
    [ run lexical_cast_loopback_test.cpp ]
    [ run lexical_cast_abstract_test.cpp ]
    [ run lexical_cast_noncopyable_test.cpp ]
    [ run lexical_cast_vc8_bug_test.cpp ]
    [ run lexical_cast_wchars_test.cpp ]
    [ run lexical_cast_float_types_test.cpp ]
    [ run lexical_cast_inf_nan_test.cpp ]
    [ run lexical_cast_containers_test.cpp ]
    [ run lexical_cast_empty_input_test.cpp ]
    [ run lexical_cast_pointers_test.cpp ]
    [ compile lexical_cast_typedefed_wchar_test.cpp : <toolset>msvc:<nowchar>on ]
    [ run lexical_cast_typedefed_wchar_test_runtime.cpp : : : <toolset>msvc:<nowchar>on <toolset>msvc,<stdlib>stlport:<build>no ]
    [ run lexical_cast_no_locale_test.cpp : : : <define>BOOST_NO_STD_LOCALE <define>BOOST_LEXICAL_CAST_ASSUME_C_LOCALE ]
    [ run lexical_cast_no_exceptions_test.cpp : : : <define>BOOST_NO_EXCEPTIONS
      <toolset>gcc-4.3:<cflags>-fno-exceptions
      <toolset>gcc-4.4:<cflags>-fno-exceptions
      <toolset>gcc-4.5:<cflags>-fno-exceptions
      <toolset>gcc-4.6:<cflags>-fno-exceptions
      <toolset>gcc-4.7:<cflags>-fno-exceptions
    ]
    [ run lexical_cast_iterator_range_test.cpp ]
    [ run lexical_cast_arrays_test.cpp ]
    [ run lexical_cast_integral_types_test.cpp ]
  ;

